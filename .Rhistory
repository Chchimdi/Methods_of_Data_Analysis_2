best_model <- which.min(all_mod_summary$bic)
# Display the best model
cat("The best model is the one with", best_model, "predictors.\n")
# To get the details of the best model
coef(all_mod, id = best_model)
all_mod <- regsubsets(Life.expectancy ~ ., data = df, nbest = 3, method = "forward")
summary(all_mod)
plot(all_mod, scale = "bic")
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/ST512_Project_data.csv")
head(df)
#View(df)
df$Status <- NULL
df$percentage.expenditure <- NULL
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
df <- df[, c("Life.expectancy", setdiff(names(df), "Life.expectancy"))]
df$HIV.AIDS <- as.factor(df$HIV.AIDS)
head(df)
is_numeric <- sapply(df, is.numeric)
# Get the names of numeric columns
numeric_cols <- names(df)[is_numeric]
for(col in numeric_cols){
# calculate the mean of the column excluding 0s and NAs
mean_col <- mean(df[[col]][df[[col]] != 0 & !is.na(df[[col]])], na.rm = TRUE)
# replace 0s and NAs in the column with the calculated mean
df[[col]][df[[col]] == 0 | is.na(df[[col]])] <- mean_col
}
head(df)
#print(names(df))
life_mod <- lm(Life.expectancy ~ ., data = df)
summary(life_mod)
plot(life_mod)
#View(df)
all_mod <- regsubsets(Life.expectancy ~ ., data = df, nbest = 3, method = "forward")
summary(all_mod)
plot(all_mod, scale = "bic")
backward <- regsubsets(Life.expectancy ~ (.^2),
data = df, nbest = 3, method = "backward")
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/ST512_Project_data1.csv")
head(df)
#View(df)
#df$Status <- NULL
#df$percentage.expenditure <- NULL
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
df <- df[, c("Life.expectancy", setdiff(names(df), "Life.expectancy"))]
df$HIV.AIDS <- as.factor(df$HIV.AIDS)
head(df)
is_numeric <- sapply(df, is.numeric)
# Get the names of numeric columns
numeric_cols <- names(df)[is_numeric]
for(col in numeric_cols){
# calculate the mean of the column excluding 0s and NAs
mean_col <- mean(df[[col]][df[[col]] != 0 & !is.na(df[[col]])], na.rm = TRUE)
# replace 0s and NAs in the column with the calculated mean
df[[col]][df[[col]] == 0 | is.na(df[[col]])] <- mean_col
}
head(df)
life_mod <- lm(Life.expectancy ~ ., data = df)
summary(life_mod)
plot(life_mod)
#View(df)
all_mod <- regsubsets(Life.expectancy ~ ., data = df, nbest = 3, method = "forward")
summary(all_mod)
plot(all_mod, scale = "bic")
# Get the summary of all_mod
all_mod_summary <- summary(backward)
# Get the model with the lowest BIC
best_model <- which.min(all_mod_summary$bic)
# Display the best model
cat("The best model is the one with", best_model, "predictors.\n")
# To get the details of the best model
coef(all_mod, id = best_model)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(IQ ~ Adoptive + Biological, table)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Regio, table)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
View(df)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(lin_mod2, newdata = test_value)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
sprintf("predicted salary = %f", pred_salary)
sprintf("Prediction interval")
pred_int <-predict(lin_mod2, test_value, interval ="prediction", level=0.95 )
sprintf("Prediction interval")
pred_int <-predict(fit_sat, test_value, interval ="prediction", level=0.95 )
pred_int
knitr::opts_chunk$set(echo = TRUE)
qplot(reorder(Block, log_r_ratio), log_r_ratio, data = cell_avgs,
colour = Treat, geom = "line", group = Treat) +
ylab("Average log regeneratio ratio")
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
head(case1301)
case1301$log_r_ratio <- NULL
?case1301
case1301$log_r_ratio <- with(case1301, log(Cover/(100-Cover))) #you did this
cell_avgs <- aggregate(log_r_ratio ~ Block + Treat, data = case1301, FUN = mean)
round(addmargins(xtabs(log_r_ratio ~ Block + Treat, cell_avgs), FUN = mean),2)
cell_counts <- aggregate(log_r_ratio ~ Block + Treat, data = case1301, FUN = length)
xtabs(log_r_ratio ~ Block + Treat, cell_counts)
qplot(Block, log_r_ratio, data = cell_avgs, colour = Treat) +
ylab("Average log regeneratio ratio")
qplot(reorder(Block, log_r_ratio), log_r_ratio, data = cell_avgs,
colour = Treat, geom = "line", group = Treat) +
ylab("Average log regeneratio ratio")
qplot(reorder(Block, log_r_ratio), log_r_ratio, data = cell_avgs,
colour = Treat, geom = "line", group = Treat) +
ylab("Average log regeneratio ratio") +
geom_point(data = cell_avgs)
fit_add <- lm(log_r_ratio ~ Block + Treat, data = case1301)
fit_sat <- lm(log_r_ratio ~ Block + Treat + Block:Treat, data = case1301)
new_data <- expand.grid(
Block = unique(case1301$Block),
Treat = unique(case1301$Treat))
#View(new_data)
new_data$pred <- predict(fit_add, newdata =new_data)
round(xtabs(pred ~ Block + Treat, new_data), 2) # a table
qplot(reorder(Block, pred), pred, data = new_data,
colour = Treat, geom = "line", group = Treat)
new_data$pred_sat <- predict(fit_sat, newdata =new_data)
round(xtabs(pred_sat ~ Block + Treat, new_data), 2)
qplot(reorder(Block, pred_sat), pred_sat, data = new_data,
colour = Treat, geom = "line", group = Treat)
anova(fit_add, fit_sat)
library(Sleuth3)
library(ggplot2)
library(MASS)
head(ex1416)
#?ex1416
Data1 <- ex1416
Data1$Response <- Data1$BAT/Data1$LH
Data1$fac.DaysPost <- factor(Data1$DaysPost)
View(Data1)
ggplot(data = Data1, aes(x = fac.DaysPost, y = Response, group=Treatment, colour = Treatment)) +   geom_point(size = 1) + theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold"))
ggplot(data = Data1, aes(x = fac.DaysPost, y = Response, group=Route, colour = Route)) +
geom_point(size = 1) + theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold"))
ggplot(data = Data1, aes(x = fac.DaysPost, y = Response, group=Agent, colour = Agent)) +
geom_point(size = 1) + theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold"))
#multiplot(p1, p2, p3, cols=2)
lmod1 <- lm(Response ~ fac.DaysPost+Treatment+Agent+Route, data = Data1)
Data2 <- fortify(lmod1, Data1)
ggplot(data=Data2, aes(.fitted, .resid)) + geom_point() +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold"))
boxcox(lmod1)
Data1$log.Response <- log(Data1$Response)
lmod2 <- lm(log.Response ~ fac.DaysPost+Treatment+Agent+Route, data = Data1)
Data3 <- fortify(lmod2, Data1)
ggplot(data=Data3, aes(.fitted, .resid)) + geom_point() +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold"))
ggplot(data = Data3, aes(x = reorder(DaysPost, Response),
y = .fitted, group=Treatment, colour = Treatment)) +
geom_point(size = 1) + theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold")) +
labs(y='Mean log(Response)')
ggplot(data = Data3, aes(x = reorder(DaysPost, Response),
y = .fitted, group=Route, colour = Route)) +
geom_point(size = 1) +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold")) + labs(y='Mean log(Response)')
ggplot(data = Data3, aes(x = reorder(DaysPost, Response),
y = .fitted, group=Agent, colour = Agent)) +
geom_point(size = 1) +
theme(axis.text = element_text(size=12),
axis.title = element_text(size=14, face="bold")) + labs(y='Mean log(Response)')
lmod3 <- lm(log.Response ~ fac.DaysPost+Treatment+Agent+Route
+ fac.DaysPost*Treatment*Agent*Route, data = Data1)
summary(lmod3)
anova(lmod3)
lmod4 <- lm(log.Response ~ DaysPost+Treatment+Agent+Route
+ DaysPost*Treatment*Agent*Route, data = Data1)
summary(lmod4)
anova(lmod4)
lmod5 <- lm(log.Response ~ DaysPost+Treatment+Route
+ DaysPost*Treatment*Route, data = Data1)
summary(lmod5)
anova(lmod5)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_add, newdata = test_value)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_add, newdata = test_value)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_add, newdata = test_value)
sprintf("predicted salary = %f", pred_salary)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, new_data), 2) # a table
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, new_data), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, new_data), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
#sprintf("predicted salary = %f", pred_salary)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_sat), pred_sat, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
#sprintf("predicted salary = %f", pred_salary)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
sprintf("predicted salary = %f", pred_salary)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_sat <- predict(fit_sat, newdata = test_value)
sprintf("Prediction interval")
pred_int <-predict(fit_sat, test_value, interval ="prediction", level=0.95 )
pred_int
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
predict(fit_add, newdata = test_value)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
#round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
#round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_sat), pred_sat, data = df,
colour = Region, geom = "line", group = Region)
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
#round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_sat), pred_sat, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("/Users/chikezic/Desktop/OSU/2023/ST512/Project/project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_sat), pred_sat, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
sprintf("predicted salary = %f", pred_salary)
sprintf("Prediction interval")
pred_int <-predict(fit_sat, test_value, interval ="prediction", level=0.95 )
pred_int
df<- read.csv("project_anova.csv")
head(df)
#View(df)
df<- read.csv("project_anova.csv")
head(df)
#View(df)
knitr::opts_chunk$set(echo = TRUE)
library(Sleuth3)
library(ggplot2)
library(Rmisc)
library(graphics)
library(leaps)
df<- read.csv("project_anova.csv")
head(df)
#View(df)
# Converting character columns to factor
for (i in seq_along(df)) {
if (is.character(df[[i]])) {
df[[i]] <- as.factor(df[[i]])
}
}
head(df)
table <- aggregate(Salary ~ Profession + Region, data = df, FUN = length)
xtabs(Salary ~ Profession + Region, table)
fit_add <- lm(Salary ~ Profession + Region, data = df)
summary(fit_add)
anova(fit_add)
fit_sat <- lm(Salary ~ Profession * Region, data = df)
summary(fit_sat)
anova(fit_add, fit_sat)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_add <- predict(fit_add, newdata = test_value)
round(xtabs(pred_add ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_add), pred_add, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
df$pred_sat <- predict(fit_sat, newdata = test_value)
round(xtabs(pred_sat ~ Profession + Region, df), 2) # a table
qplot(reorder(Profession, pred_sat), pred_sat, data = df,
colour = Region, geom = "line", group = Region)
test_value <- data.frame(Profession = "Data Scientist", Region = "Seattle")
pred_salary <- predict(fit_sat, newdata = test_value)
sprintf("predicted salary = %f", pred_salary)
sprintf("Prediction interval")
pred_int <-predict(fit_sat, test_value, interval ="prediction", level=0.95 )
pred_int
